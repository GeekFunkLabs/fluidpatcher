description: example bank file that demonstrates many of the features of fluidpatcher
  view the wiki at https://github.com/albedozero/fluidpatcher/wiki for detailed info

note: >
  Nodes such as `comment`, `info`, etc. are just here to provide information. Note that YAML
  (usually) ignores text after #, so those comments will disappear if the bank file is saved.
# e.g. this comment will disappear

patches:
  Just EP:
    info: basic patch - assigns a voice (soundfont:bank:program) to a MIDI channel
    1: FM Piano.sf2:000:000
    
  Two Hands:
    info: This patch has `router_rules` that clear the default rules and send each
      half of the keyboard to a different voice.
    1: FM Piano.sf2:000:000
    note: extra zeros in bank and program numbers are optional
    2: ModSynth_R1.sf2:0:1
    router_rules:
    - clear
    - {type: note, chan: 1, par1: F3-G9}
    - {type: note, chan: 1=2, par1: C0-E3*1-12}
    - {type: cc}
    comment: These messages are sent each time the patch is selected
    messages:
    - cc:2:73:0
    - cc:2:74:0

  Playable:
    3: VintageDreamsWaves-v2.sf2:000:014
    router_rules:
    - {type: cc, chan: 1=3}
    - {type: note, chan: 1=3, par1: Ab3-G9}
    - {type: note, chan: 1=3, par1: G#3-G9*1+5}
    - par1: C0-G3=D6-C2
      chan: 1=3
      type: note
    comment: Mappings and lists can be inline with {} and [] or block style,
      and parameters can be in any order.      

  Cheap Synth:
    info: LADSPA effects can be used if they are available on your system
    2: ModSynth_R1.sf2:000:000
    ladspafx:
      delayline1: &delayeffect
        comment: The & symbol defines a YAML anchor
        lib: delay.so
        audio: mono
        group: 2
        vals: {Delay: 0.3, Dry/Wet: 0.2}
      delayline2: *delayeffect
      delayline3: *delayeffect
    explanation: LADSPA effects are chained in the order they are listed. The anchor
      links copy the contents of delayline1 into delayline2 and delayline3, creating
      a sort of bucket delay
    router_rules:
    - {type: note, chan: 1=2, par2: 1-127=127}
    - {type: cc, chan: 1=2}
    - {type: pbend, chan: 1=2, par1: 8192-16383}
    - {type: pbend=cc, chan: 1=2, par2: 74, par1: 0-8192=127-0}
    - {type: cc, chan: 1, par1: 14, par2: 0-127=0-1, ladspafx: delayline1, port: Delay}
    - {type: cc, chan: 1, par1: 14, par2: 0-127=0-1, ladspafx: delayline2, port: Delay}
    - {type: cc, chan: 1, par1: 14, par2: 0-127=0-1, ladspafx: delayline3, port: Delay}
    comment: The first rule uses par2 routing to make all notes maximum volume like a retro synth,
      The `ladspafx` rules connects a cc to the Delay value for each of the delay effects, and the
      `pbend=cc` rule triggers control change messages from pitch bends.

  Elevator Jam:
    description: This patch demonstrates sequencers, arpeggiators, midifile players
    3: VintageDreamsWaves-v2.sf2:000:005
    sequencers:
      fluteloop:
        swing: 0.7
        notes: [note:4:A5:70, note:4:G5:70, note:4:A5:70, note:4:C6:70]
    4: VintageDreamsWaves-v2.sf2:000:017
    arpeggiators:
      ep_arp: {tdiv: 8, style: both, octaves: 2}
    5: VintageDreamsWaves-v2.sf2:000:069
    midiplayers:
      groove:
        file: elevatorgroove.mid
        barlength: 1536
        loops: [15350, 18419]
        info: barlength and loops are given in MIDI ticks
        chan: 1-10*1+5
        mask: prog, kpress
    6: VintageDreamsWaves-v2.sf2:000:035
    7: VintageDreamsWaves-v2.sf2:000:020
    15: VintageDreamsWaves-v2.sf2:128:004
    router_rules:
    - {type: note, chan: 1=3, par1: C4-C9}
    - {type: note, chan: 1=5, par1: C3-B3, arpeggiator: ep_arp}
    - {type: note, chan: 1, par1: F#2, par2: 1-127=-1, sequencer: fluteloop}
    - {type: note, chan: 1, par1: G#2, par2: 1-127=0, sequencer: fluteloop}
    - {type: note, chan: 1, par1: A#2, par2: 1-127=2, sequencer: fluteloop}
    - {type: note, chan: 1, par1: F2, par2: 1-127=1, midiplayer: groove}
    - {type: note, chan: 1, par1: G2, par2: 1-127=0, midiplayer: groove}
    - {type: note, chan: 1, par1: A2, par2: 1-127=-1, midiplayer: groove, tick: 10752}
    - {type: note, chan: 1, par1: B2, par2: 1-127=-1, midiplayer: groove, tick: 13824}
    - {type: cc, chan: 1, par1: 13, par2: 0-127=30-240, tempo: groove}
    - {type: cc, chan: 1, par1: 13, par2: 0-127=30-240, tempo: fluteloop}
    - {type: cc, chan: 1, par1: 13, par2: 0-127=30-240, tempo: ep_arp}

about bank vs patch level: Settings outside of `patches` are applied first,
  every time a new patch is selected.

fluidsettings:
  synth.reverb.width: 0.5

router_rules:
- {type: cc, chan: 1=2-16, par1: 7}
- {type: pbend, chan: 1=3}
- type: cc
  chan: 1
  par1: 14
  par2: 0-127=0.0-1.0
  fluidsetting: synth.reverb.room-size
  comment: See full list of fluidsettings at http://www.fluidsynth.org/api/fluidsettings.xml
    Only `synth.` settings work in bank files

about init blocks: The init block is processed once, when the bank is first loaded.
  For example, this sets an initial value for synth.reverb.room-size that can be
  changed by the rule above, but the fluidsettings block above sets synth.reverb.width
  every time a patch is selected. Only `fluidsettings` and `messages` keywords are
  used in `init` blocks
  
init:
  fluidsettings:
    synth.reverb.room-size: 0.8
  messages: [cc:3:11:50, cc:4:11:50, cc:5:11:50, cc:6:11:50, cc:7:11:60,
             cc:15:11:70, cc:1:91:70, cc:1:91:70, cc:2:91:80]
  comment: These messages use expression (CC#11) to soften the loud voices assigned
    to channels 3-7 and 15, and set the reverb level on channels 1 and 2